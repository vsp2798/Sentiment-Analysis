{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[nltk_data] Downloading package punkt to /Users/pingwu/nltk_data...\n",
      "[nltk_data]   Package punkt is already up-to-date!\n",
      "[nltk_data] Downloading package words to /Users/pingwu/nltk_data...\n",
      "[nltk_data]   Package words is already up-to-date!\n",
      "[nltk_data] Downloading package vader_lexicon to\n",
      "[nltk_data]     /Users/pingwu/nltk_data...\n",
      "[nltk_data]   Package vader_lexicon is already up-to-date!\n",
      "[nltk_data] Downloading package averaged_perceptron_tagger to\n",
      "[nltk_data]     /Users/pingwu/nltk_data...\n",
      "[nltk_data]   Package averaged_perceptron_tagger is already up-to-\n",
      "[nltk_data]       date!\n",
      "[nltk_data] Downloading package stopwords to\n",
      "[nltk_data]     /Users/pingwu/nltk_data...\n",
      "[nltk_data]   Package stopwords is already up-to-date!\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "import itertools\n",
    "\n",
    "try: \n",
    "    import numpy as np\n",
    "except:\n",
    "    ! pip install numpy\n",
    "    import numpy as np\n",
    "    \n",
    "try: \n",
    "    import pandas as pd\n",
    "except:\n",
    "    ! pip install pandas\n",
    "    import pandas as pd\n",
    "    \n",
    "try: \n",
    "    import sklearn\n",
    "except:\n",
    "    ! pip install sklearn\n",
    "\n",
    "from sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.metrics import accuracy_score\n",
    "from sklearn.model_selection import KFold\n",
    "from sklearn.metrics import confusion_matrix\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.naive_bayes import MultinomialNB, ComplementNB\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.linear_model import LogisticRegression, PassiveAggressiveClassifier\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "try: \n",
    "    import nltk\n",
    "except:\n",
    "    ! pip install nltk\n",
    "    import nltk    \n",
    "## Download Resources\n",
    "nltk.download('punkt')\n",
    "nltk.download('words')\n",
    "nltk.download('vader_lexicon')\n",
    "nltk.download('averaged_perceptron_tagger')\n",
    "nltk.download(\"stopwords\")\n",
    "from nltk.tokenize import RegexpTokenizer\n",
    "from nltk.stem import PorterStemmer\n",
    "from nltk.corpus import words, stopwords\n",
    "from nltk.sentiment import SentimentAnalyzer\n",
    "from nltk.sentiment.vader import SentimentIntensityAnalyzer\n",
    "\n",
    "############\n",
    "try: \n",
    "    import syllables\n",
    "except:\n",
    "    ! pip install syllables\n",
    "    import syllables\n",
    "\n",
    "import string\n",
    "\n",
    "try: \n",
    "    import scipy\n",
    "except:\n",
    "    ! pip install scipy\n",
    "from scipy.sparse import coo_matrix, hstack\n",
    "\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')\n",
    "\n",
    "#import pickle\n",
    "\n",
    "try: \n",
    "    import matplotlib\n",
    "except:\n",
    "    ! pip install matplotlib\n",
    "    \n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "def appendArticles(articleList, basePath):\n",
    "    # This function appends all the support articles into one. \n",
    "    contents = ''\n",
    "    for articleNumber in articleList:\n",
    "        f = open(basePath+str(articleNumber)+\".txt\", \"r\", encoding=\"utf8\")\n",
    "        contents = f.read()+\";\"+contents\n",
    "        f.close()\n",
    "    return contents\n",
    "\n",
    "def stemTweetToWordList(text, stopWords):\n",
    "    # This function lower all the words in the text, then \n",
    "    # exclude the stop words and stem the rest.\n",
    "    ps = PorterStemmer()\n",
    "    tweet =text.lower() # lower case\n",
    "    tokenizer = RegexpTokenizer(r'\\w+')  \n",
    "    wordList = tokenizer.tokenize(tweet)\n",
    "     # remove stop words and store the stem version. \n",
    "    return [ps.stem(word) for word in wordList if word not in stopWords]\n",
    "\n",
    "def startNumber(text):\n",
    "    # This function check if the claim start with numbers.\n",
    "    if text[:1].isdigit():\n",
    "        return 1\n",
    "    else:\n",
    "        return 0\n",
    "\n",
    "def containQuestion(text):\n",
    "    # This function check if the claim has particular punctuations.\n",
    "    if '?' in text or '!' in text:\n",
    "        return 1\n",
    "    else:\n",
    "        return 0\n",
    "    \n",
    "def numberSyllable(text):\n",
    "    text = text.translate(str.maketrans('', '', string.punctuation))\n",
    "    number_words = len(text.split())\n",
    "    total = 0\n",
    "    for word in text.split():\n",
    "        total += syllables.estimate(word)\n",
    "    return total/number_words\n",
    "\n",
    "def assignLength(row, colName):\n",
    "    # This function returns the length of the text\n",
    "    return len(row[colName])\n",
    "\n",
    "def POSTagging(text):\n",
    "    # This function assigns part of speech tag to words\n",
    "    tokens = nltk.word_tokenize(text)\n",
    "    return nltk.pos_tag(tokens) \n",
    "\n",
    "def adjectives(lists):\n",
    "    # This function counts the number of adjective words.\n",
    "    count = 0\n",
    "    adjective_tag = ['JJ','JJR','JJS']\n",
    "    for word in lists:\n",
    "        if word[1] in adjective_tag:\n",
    "            count +=1\n",
    "    return count\n",
    "\n",
    "def nouns(lists):\n",
    "    # This function counts the number of noun words.\n",
    "    count = 0\n",
    "    noun_tag = ['NN','NNS','NNP']\n",
    "    for word in lists:\n",
    "        if word[1] in noun_tag:\n",
    "            count +=1\n",
    "    return count\n",
    "\n",
    "def verbs(lists):\n",
    "    # This function counts the number of verb words.\n",
    "    count = 0\n",
    "    verb_tag = ['VB','VBD','VBG','VBN','VBP','VBZ']\n",
    "    for word in lists:\n",
    "        if word[1] in verb_tag:\n",
    "            count +=1\n",
    "    return count\n",
    "\n",
    "def firstWord(lists):\n",
    "    # This function checks if the first word is in the below category.\n",
    "    tag = ['VB','VBD','VBG','VBN','VBP','VBZ','NN','NNS','NNP','JJ','JJR','JJS']\n",
    "    word = lists[0]\n",
    "    if word in tag:\n",
    "        return 1\n",
    "    else:\n",
    "        return 0\n",
    "    \n",
    "def lastWord(lists):\n",
    "    # This function checks if the last word is in the below category.\n",
    "    tag = ['VB','VBD','VBG','VBN','VBP','VBZ','NN','NNS','NNP','JJ','JJR','JJS']\n",
    "    word = lists[-1]\n",
    "    if word in tag:\n",
    "        return 1\n",
    "    else:\n",
    "        return 0\n",
    "    \n",
    "def FPP(lists):\n",
    "    # This function counts the number of first person words.\n",
    "    count = 0\n",
    "    FPP_tag = ['I','ME','WE','US','MY','MINE','OUR','OURS']\n",
    "    for word in lists:\n",
    "        if word[0].upper() in FPP_tag:\n",
    "            count +=1\n",
    "    return count"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# read the data from local files\n",
    "basePath = os.getcwd()\n",
    "# 0:false, 1:partly true, 2:true\n",
    "claim = pd.read_json(open(basePath + \"/train.json\", \"r\", encoding=\"utf8\"))\n",
    "txtPath = basePath+\"/articles/\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# combine all support articles into one for data cleaning purpose\n",
    "claim['articleTextRaw'] = claim.apply(lambda row: appendArticles(row['related_articles'], txtPath) ,axis=1)\n",
    "# process the article text including lower words, exclude stop words and stem them.\n",
    "stopWords = stopwords.words('english')\n",
    "claim['articleText'] = claim.apply(lambda row: stemTweetToWordList(row['articleTextRaw'], stopWords) ,axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "# use nltk sentiment analyzer to analyze the sentiment of claims, and get a score in between -1 and 1.\n",
    "sid = SentimentIntensityAnalyzer()\n",
    "claim['claimSentiment'] = claim.apply(lambda row: sid.polarity_scores(row['claim'])['compound'] ,axis=1)\n",
    "claim['SentimentAdjust'] = claim['claimSentiment']+1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "#check if claim starts with a number\n",
    "claim['start_number'] = claim.apply(lambda row: startNumber(row['claim']) ,axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "#check if claim contain any ? or !\n",
    "claim['containQX'] = claim.apply(lambda row: containQuestion(row['claim']) ,axis=1)\n",
    "#number of words in the claim\n",
    "claim['titleWords'] = claim.apply(lambda row: len(row['claim'].split()) ,axis=1)\n",
    "#number of related articles to the claim\n",
    "claim['numberArticle'] = claim.apply(lambda row: len(row['related_articles']) ,axis=1)\n",
    "#number of average syllables in each word in the claim\n",
    "claim['claimSyllable'] = claim.apply(lambda row: numberSyllable(row['claim']) ,axis=1)\n",
    "claim['articleLength'] = claim.apply(lambda row: assignLength(row, 'articleText'), axis=1)\n",
    "count = lambda l1,l2: sum([1 for x in l1 if x in l2])\n",
    "#get number of punctuation in the claim\n",
    "claim['claimPunc'] = claim.apply(lambda row: count(row['claim'],set(string.punctuation)), axis=1)\n",
    "#get number of punctuation in each related articles\n",
    "claim['articlePunc'] = claim.apply(lambda row: count(row['articleText'],set(string.punctuation))/row['numberArticle'], axis=1)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "#get a list of words and their POS for the claim\n",
    "claim['claimPOS'] = claim.apply(lambda row: POSTagging(row['claim']), axis=1)\n",
    "#check number of adjectives, nouns, and verbs in the claim\n",
    "claim['claimAdj'] = claim.apply(lambda row: adjectives(row['claimPOS']), axis=1)\n",
    "claim['claimNoun'] = claim.apply(lambda row: nouns(row['claimPOS']), axis=1)\n",
    "claim['claimVerb'] = claim.apply(lambda row: verbs(row['claimPOS']), axis=1)\n",
    "claim['claimPOSratio'] = claim.apply(lambda row: (row['claimAdj']+row['claimNoun']+row['claimVerb'])/len(row['claimPOS']), axis=1)\n",
    "claim['claimFirst'] = claim.apply(lambda row: firstWord(row['claimPOS']), axis=1)\n",
    "claim['claimLast'] = claim.apply(lambda row: lastWord(row['claimPOS']), axis=1)\n",
    "claim['claimFPP'] = claim.apply(lambda row: FPP(row['claimPOS']), axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "def plot_confusion_matrix(cm, classes, normalize=False, title='Confusion matrix', cmap=plt.cm.Blues):\n",
    "    \"\"\"\n",
    "    See full source and example: \n",
    "    http://scikit-learn.org/stable/auto_examples/model_selection/plot_confusion_matrix.html\n",
    "    \n",
    "    This function prints and plots the confusion matrix.\n",
    "    Normalization can be applied by setting `normalize=True`.\n",
    "    \"\"\"\n",
    "    plt.tight_layout()\n",
    "    plt.show()\n",
    "    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n",
    "    plt.title(title)\n",
    "    plt.colorbar()\n",
    "    tick_marks = np.arange(len(classes))\n",
    "    plt.xticks(tick_marks, classes, rotation=45)\n",
    "    #plt.yticks(tick_marks, classes)\n",
    "    plt.yticks(tick_marks, classes, size = 20, rotation='vertical')\n",
    "    if normalize:\n",
    "        cm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]\n",
    "        print(\"Normalized confusion matrix\")\n",
    "    else:\n",
    "        print('Confusion matrix, without normalization')\n",
    "\n",
    "    thresh = cm.max() / 2.\n",
    "    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n",
    "        plt.text(j, i, cm[i, j],\n",
    "                 horizontalalignment=\"center\",\n",
    "                 color=\"white\" if cm[i, j] > thresh else \"black\")\n",
    "\n",
    "    plt.tight_layout()\n",
    "    plt.ylabel('True label')\n",
    "    plt.xlabel('Predicted label')\n",
    "    plt.ylim([-0.5, 2.5])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "# join the list of words into string by space to extract features.\n",
    "claim['articleText'] = claim.apply(lambda row: ' '.join(row['articleText']), axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Store the intermediate information in order to avoid repeating the process above every time. \n",
    "# file = open('important', 'wb')\n",
    "# pickle.dump(claim, file)\n",
    "# file.close()\n",
    "# file = open('important', 'rb')\n",
    "# claim = pickle.load(file)\n",
    "# file.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(claim, claim['label'], test_size=0.4, random_state=10)\n",
    "X_train_text, X_test_text= X_train['articleText'], X_test['articleText']\n",
    "\n",
    "# Initialize the `tfidf_vectorizer` \n",
    "tfidf_vectorizer = TfidfVectorizer(stop_words='english', \\\n",
    "                                   ngram_range=(1, 1)) \n",
    "# Fit and transform the training data \n",
    "tfidf_train = tfidf_vectorizer.fit_transform(X_train_text) \n",
    "# Transform the test set \n",
    "tfidf_test = tfidf_vectorizer.transform(X_test_text)\n",
    "\n",
    "# Add the manually selected features in the data\n",
    "featureToBeAdded = ['SentimentAdjust','numberArticle','articleLength','start_number',\\\n",
    "                    'containQX','titleWords','claimSyllable','claimPunc','articlePunc',\\\n",
    "                    'claimAdj', 'claimNoun', 'claimVerb', 'claimPOSratio', 'claimFirst',\\\n",
    "                    'claimLast', 'claimFPP',\n",
    "                   ]\n",
    "combResults = tfidf_train\n",
    "for featureName in featureToBeAdded:\n",
    "    colToBeAdded = coo_matrix(X_train[featureName]).transpose()\n",
    "    combResults = hstack([combResults, colToBeAdded])\n",
    "combResultsTest = tfidf_test\n",
    "for featureName in featureToBeAdded:\n",
    "    colToBeAdded = coo_matrix(X_test[featureName]).transpose()\n",
    "    combResultsTest = hstack([combResultsTest, colToBeAdded])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Compare the performance of potential models and select one to further tuning the hyperparameters to improve the accuracy. Potential candidates include logistic regression, naive bayes, support vector machine and k nearest neighbours."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "the model is logistic\n",
      "accuracy:   0.622\n",
      "the model is multi naive bayes\n",
      "accuracy:   0.524\n",
      "the model is complement naive bayes\n",
      "accuracy:   0.532\n"
     ]
    }
   ],
   "source": [
    "clf1 = LogisticRegression(random_state=0, solver='newton-cg', multi_class='multinomial', max_iter=10000, n_jobs = -1)\n",
    "clf2 = MultinomialNB() \n",
    "clf3 = ComplementNB()\n",
    "modelList = [(clf1,'logistic'), (clf2,'multi naive bayes'), (clf3,'complement naive bayes')]\n",
    "for model in modelList:\n",
    "    print('the model is %s' %model[1])\n",
    "    clf = model[0]\n",
    "    clf.fit(combResults, y_train)\n",
    "    pred = clf.predict(combResultsTest)\n",
    "    score = accuracy_score(y_test, pred)\n",
    "    print(\"accuracy:   %0.3f\" % score)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "the model is svc\n",
      "accuracy:   0.473\n",
      "the model is kNN\n",
      "accuracy:   0.470\n"
     ]
    }
   ],
   "source": [
    "clf4 =  SVC()\n",
    "clf5 =  KNeighborsClassifier(n_jobs=-1)\n",
    "modelList = [(clf4,'svc'), (clf5,'kNN')]\n",
    "for model in modelList:\n",
    "    print('the model is %s' %model[1])\n",
    "    clf = model[0]\n",
    "    clf.fit(combResults, y_train)\n",
    "    pred = clf.predict(combResultsTest)\n",
    "    score = accuracy_score(y_test, pred)\n",
    "    print(\"accuracy:   %0.3f\" % score)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "From the previous model performance test, it shows logistic regression does a lot better than the rest, so it is chosen to futher tune its parameters. First set of parameters to tune are regularization strength and solver."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "C is 0.100000\n",
      "solver is newton-cg\n",
      "accuracy:   0.615\n",
      "C is 0.100000\n",
      "solver is sag\n",
      "accuracy:   0.484\n",
      "C is 0.100000\n",
      "solver is saga\n",
      "accuracy:   0.484\n",
      "C is 0.100000\n",
      "solver is lbfgs\n",
      "accuracy:   0.591\n",
      "C is 0.575000\n",
      "solver is newton-cg\n",
      "accuracy:   0.616\n",
      "C is 0.575000\n",
      "solver is sag\n",
      "accuracy:   0.484\n",
      "C is 0.575000\n",
      "solver is saga\n",
      "accuracy:   0.484\n",
      "C is 0.575000\n",
      "solver is lbfgs\n",
      "accuracy:   0.526\n",
      "C is 1.050000\n",
      "solver is newton-cg\n",
      "accuracy:   0.614\n",
      "C is 1.050000\n",
      "solver is sag\n",
      "accuracy:   0.484\n",
      "C is 1.050000\n",
      "solver is saga\n",
      "accuracy:   0.484\n",
      "C is 1.050000\n",
      "solver is lbfgs\n",
      "accuracy:   0.527\n",
      "C is 1.525000\n",
      "solver is newton-cg\n",
      "accuracy:   0.610\n",
      "C is 1.525000\n",
      "solver is sag\n",
      "accuracy:   0.484\n",
      "C is 1.525000\n",
      "solver is saga\n"
     ]
    }
   ],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(claim, claim['label'], test_size=0.4, random_state=10)\n",
    "X_train_text, X_test_text= X_train['articleText'], X_test['articleText']\n",
    "\n",
    "# Initialize the `tfidf_vectorizer` \n",
    "tfidf_vectorizer = TfidfVectorizer(stop_words='english', \\\n",
    "                                   ngram_range=(1, 1), max_features=1000) \n",
    "# Fit and transform the training data \n",
    "tfidf_train = tfidf_vectorizer.fit_transform(X_train_text) \n",
    "# Transform the test set \n",
    "tfidf_test = tfidf_vectorizer.transform(X_test_text)\n",
    "\n",
    "featureToBeAdded = ['SentimentAdjust','numberArticle','articleLength','start_number',\\\n",
    "                    'containQX','titleWords','claimSyllable','claimPunc','articlePunc',\\\n",
    "                    'claimAdj', 'claimNoun', 'claimVerb', 'claimPOSratio', 'claimFirst',\\\n",
    "                    'claimLast', 'claimFPP',\n",
    "                   ]\n",
    "combResults = tfidf_train\n",
    "for featureName in featureToBeAdded:\n",
    "    colToBeAdded = coo_matrix(X_train[featureName]).transpose()\n",
    "    combResults = hstack([combResults, colToBeAdded])\n",
    "\n",
    "combResultsTest = tfidf_test\n",
    "for featureName in featureToBeAdded:\n",
    "    colToBeAdded = coo_matrix(X_test[featureName]).transpose()\n",
    "    combResultsTest = hstack([combResultsTest, colToBeAdded])\n",
    "    \n",
    "for C in np.linspace(0.1, 2, 5):\n",
    "    for solver in ('newton-cg', 'sag', 'saga', 'lbfgs'):\n",
    "        print('C is %f' %C)\n",
    "        print('solver is %s' %solver)\n",
    "        clf = LogisticRegression(random_state=0, solver=solver, multi_class='multinomial', \\\n",
    "                                 n_jobs = -1, max_iter=10000, C=C)\n",
    "\n",
    "        clf.fit(combResults, y_train)\n",
    "        pred = clf.predict(combResultsTest)\n",
    "        score = accuracy_score(y_test, pred)\n",
    "        print(\"accuracy:   %0.3f\" % score)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The grid search results show that regularization strentgh C=0.57 and solver=newton-cg achieves the best accuracy 0.616."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "With the best hyperparameters searched above, max_features and max_df used to extract word features in TfidfVectorizer are to be tuned. Also, single word and bigram are used."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "max_features is 500.000000\n",
      "max_df is 0.500000\n",
      "accuracy:   0.608\n",
      "max_features is 500.000000\n",
      "max_df is 0.700000\n",
      "accuracy:   0.608\n",
      "max_features is 500.000000\n",
      "max_df is 0.900000\n",
      "accuracy:   0.610\n",
      "max_features is 1100.000000\n",
      "max_df is 0.500000\n",
      "accuracy:   0.613\n",
      "max_features is 1100.000000\n",
      "max_df is 0.700000\n",
      "accuracy:   0.618\n",
      "max_features is 1100.000000\n",
      "max_df is 0.900000\n",
      "accuracy:   0.618\n",
      "max_features is 1700.000000\n",
      "max_df is 0.500000\n",
      "accuracy:   0.610\n",
      "max_features is 1700.000000\n",
      "max_df is 0.700000\n"
     ]
    }
   ],
   "source": [
    "for max_features in range(500, 1800, 600):\n",
    "    for max_df in np.linspace(0.5, 0.9, 3):\n",
    "        print('max_features is %f' %max_features)\n",
    "        print('max_df is %f' %max_df)\n",
    "\n",
    "        X_train, X_test, y_train, y_test = train_test_split(claim, claim['label'], test_size=0.4, random_state=10)\n",
    "        X_train_text, X_test_text= X_train['articleText'], X_test['articleText']\n",
    "\n",
    "        # Initialize the `tfidf_vectorizer` \n",
    "        tfidf_vectorizer = TfidfVectorizer(stop_words='english', \\\n",
    "                                           ngram_range=(1, 2), max_df=max_df, max_features=max_features) \n",
    "        # Fit and transform the training data \n",
    "        tfidf_train = tfidf_vectorizer.fit_transform(X_train_text) \n",
    "        # Transform the test set \n",
    "        tfidf_test = tfidf_vectorizer.transform(X_test_text)\n",
    "\n",
    "\n",
    "        featureToBeAdded = ['SentimentAdjust','numberArticle','articleLength','start_number',\\\n",
    "                            'containQX','titleWords','claimSyllable','claimPunc','articlePunc',\\\n",
    "                            'claimAdj', 'claimNoun', 'claimVerb', 'claimPOSratio', 'claimFirst',\\\n",
    "                            'claimLast', 'claimFPP',\n",
    "                            #'claimSentiment', 'claimPOS'\n",
    "                           ]\n",
    "\n",
    "        combResults = tfidf_train\n",
    "        for featureName in featureToBeAdded:\n",
    "            colToBeAdded = coo_matrix(X_train[featureName]).transpose()\n",
    "            combResults = hstack([combResults, colToBeAdded])\n",
    "\n",
    "        combResultsTest = tfidf_test\n",
    "        for featureName in featureToBeAdded:\n",
    "            colToBeAdded = coo_matrix(X_test[featureName]).transpose()\n",
    "            combResultsTest = hstack([combResultsTest, colToBeAdded])\n",
    "\n",
    "\n",
    "        clf = LogisticRegression(random_state=0, solver='newton-cg', C=0.6, multi_class='multinomial', \\\n",
    "                                 n_jobs = -1, max_iter=10000)\n",
    "\n",
    "        clf.fit(combResults, y_train)\n",
    "        pred = clf.predict(combResultsTest)\n",
    "        score = accuracy_score(y_test, pred)\n",
    "        print(\"accuracy:   %0.3f\" % score)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This is a continuation of the previous grid search since combining into one cell takes too long."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "max_features is 2300.000000\n",
      "max_df is 0.500000\n",
      "accuracy:   0.614\n",
      "max_features is 2300.000000\n",
      "max_df is 0.700000\n",
      "accuracy:   0.614\n",
      "max_features is 2300.000000\n",
      "max_df is 0.900000\n",
      "accuracy:   0.617\n"
     ]
    }
   ],
   "source": [
    "for max_features in range(2300, 2500, 600):\n",
    "    for max_df in np.linspace(0.5, 0.9, 3):\n",
    "        print('max_features is %f' %max_features)\n",
    "        print('max_df is %f' %max_df)\n",
    "\n",
    "        X_train, X_test, y_train, y_test = train_test_split(claim, claim['label'], test_size=0.4, random_state=10)\n",
    "        X_train_text, X_test_text= X_train['articleText'], X_test['articleText']\n",
    "\n",
    "        # Initialize the `tfidf_vectorizer` \n",
    "        tfidf_vectorizer = TfidfVectorizer(stop_words='english', \\\n",
    "                                           ngram_range=(1, 2), max_df=max_df, max_features=max_features) \n",
    "        # Fit and transform the training data \n",
    "        tfidf_train = tfidf_vectorizer.fit_transform(X_train_text) \n",
    "        # Transform the test set \n",
    "        tfidf_test = tfidf_vectorizer.transform(X_test_text)\n",
    "\n",
    "\n",
    "        featureToBeAdded = ['SentimentAdjust','numberArticle','articleLength','start_number',\\\n",
    "                            'containQX','titleWords','claimSyllable','claimPunc','articlePunc',\\\n",
    "                            'claimAdj', 'claimNoun', 'claimVerb', 'claimPOSratio', 'claimFirst',\\\n",
    "                            'claimLast', 'claimFPP',\n",
    "                            #'claimSentiment', 'claimPOS'\n",
    "                           ]\n",
    "\n",
    "        combResults = tfidf_train\n",
    "        for featureName in featureToBeAdded:\n",
    "            colToBeAdded = coo_matrix(X_train[featureName]).transpose()\n",
    "            combResults = hstack([combResults, colToBeAdded])\n",
    "\n",
    "        combResultsTest = tfidf_test\n",
    "        for featureName in featureToBeAdded:\n",
    "            colToBeAdded = coo_matrix(X_test[featureName]).transpose()\n",
    "            combResultsTest = hstack([combResultsTest, colToBeAdded])\n",
    "\n",
    "\n",
    "        clf = LogisticRegression(random_state=0, solver='newton-cg', C=0.6, multi_class='multinomial', \\\n",
    "                                 n_jobs = -1, max_iter=10000)\n",
    "\n",
    "        clf.fit(combResults, y_train)\n",
    "        pred = clf.predict(combResultsTest)\n",
    "        score = accuracy_score(y_test, pred)\n",
    "        print(\"accuracy:   %0.3f\" % score)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "From above results, it shows max_features = 1100.000000 and max_df=0.700000 achieves the best accuracy=0.618, a merely 0.2% improvement. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>SentimentAdjust</th>\n",
       "      <th>numberArticle</th>\n",
       "      <th>articleLength</th>\n",
       "      <th>start_number</th>\n",
       "      <th>containQX</th>\n",
       "      <th>titleWords</th>\n",
       "      <th>claimSyllable</th>\n",
       "      <th>claimPunc</th>\n",
       "      <th>articlePunc</th>\n",
       "      <th>claimAdj</th>\n",
       "      <th>claimNoun</th>\n",
       "      <th>claimVerb</th>\n",
       "      <th>claimPOSratio</th>\n",
       "      <th>claimFirst</th>\n",
       "      <th>claimLast</th>\n",
       "      <th>claimFPP</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>1.3182</td>\n",
       "      <td>4</td>\n",
       "      <td>680</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>1.500000</td>\n",
       "      <td>2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>0.7977</td>\n",
       "      <td>3</td>\n",
       "      <td>895</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "      <td>2.400000</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>11</td>\n",
       "      <td>2</td>\n",
       "      <td>0.812500</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>1.0000</td>\n",
       "      <td>3</td>\n",
       "      <td>1515</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "      <td>1.600000</td>\n",
       "      <td>3</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>0.687500</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>1.0000</td>\n",
       "      <td>3</td>\n",
       "      <td>5228</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>18</td>\n",
       "      <td>1.666667</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>7</td>\n",
       "      <td>4</td>\n",
       "      <td>0.631579</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>0.2036</td>\n",
       "      <td>6</td>\n",
       "      <td>6620</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>22</td>\n",
       "      <td>1.636364</td>\n",
       "      <td>6</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>7</td>\n",
       "      <td>0.464286</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   SentimentAdjust  numberArticle  articleLength  start_number  containQX  \\\n",
       "0           1.3182              4            680             0          0   \n",
       "1           0.7977              3            895             0          0   \n",
       "2           1.0000              3           1515             0          0   \n",
       "3           1.0000              3           5228             0          0   \n",
       "4           0.2036              6           6620             0          0   \n",
       "\n",
       "   titleWords  claimSyllable  claimPunc  articlePunc  claimAdj  claimNoun  \\\n",
       "0          12       1.500000          2          0.0         1          5   \n",
       "1          15       2.400000          1          0.0         0         11   \n",
       "2          15       1.600000          3          0.0         1          5   \n",
       "3          18       1.666667          1          0.0         1          7   \n",
       "4          22       1.636364          6          0.0         1          5   \n",
       "\n",
       "   claimVerb  claimPOSratio  claimFirst  claimLast  claimFPP  \n",
       "0          1       0.500000           0          0         0  \n",
       "1          2       0.812500           0          0         0  \n",
       "2          5       0.687500           0          0         0  \n",
       "3          4       0.631579           0          0         0  \n",
       "4          7       0.464286           0          0         1  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "claim[featureToBeAdded].head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "After inspecting the data in claim, it is found that many features have values from hundreds to thousands, so attempt is made to scale them back to the same range as the word features and see if this action could improve the accuracy."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "accuracy:   0.617\n"
     ]
    }
   ],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(claim, claim['label'], test_size=0.4, random_state=10)\n",
    "X_train_text, X_test_text= X_train['articleText'], X_test['articleText']\n",
    "\n",
    "###\n",
    "#preprocess data\n",
    "normalizedList =['numberArticle', 'articleLength', 'titleWords','claimPunc', 'articlePunc', 'claimNoun',\\\n",
    "                 'claimVerb']\n",
    "for column in normalizedList:\n",
    "    scaler = StandardScaler()\n",
    "    X_train[column] = scaler.fit_transform(pd.DataFrame(X_train[column])) - \\\n",
    "                                      min(scaler.fit_transform(pd.DataFrame(X_train[column])))\n",
    "    X_test[column] = scaler.transform(pd.DataFrame(X_test[column])) - \\\n",
    "                                      min(scaler.transform(pd.DataFrame(X_test[column])))\n",
    "###\n",
    "\n",
    "# Initialize the `tfidf_vectorizer` \n",
    "tfidf_vectorizer = TfidfVectorizer(stop_words='english', \\\n",
    "                                   ngram_range=(1, 2), max_df=0.7, max_features=1100) \n",
    "# Fit and transform the training data \n",
    "tfidf_train = tfidf_vectorizer.fit_transform(X_train_text) \n",
    "# Transform the test set \n",
    "tfidf_test = tfidf_vectorizer.transform(X_test_text)\n",
    "\n",
    "featureToBeAdded = ['SentimentAdjust','numberArticle','articleLength','start_number',\\\n",
    "                    'containQX','titleWords','claimSyllable','claimPunc','articlePunc',\\\n",
    "                    'claimAdj', 'claimNoun', 'claimVerb', 'claimPOSratio', 'claimFirst',\\\n",
    "                    'claimLast', 'claimFPP',\n",
    "                   ]\n",
    "\n",
    "combResults = tfidf_train\n",
    "for featureName in featureToBeAdded:\n",
    "    colToBeAdded = coo_matrix(X_train[featureName]).transpose()\n",
    "    combResults = hstack([combResults, colToBeAdded])\n",
    "\n",
    "combResultsTest = tfidf_test\n",
    "for featureName in featureToBeAdded:\n",
    "    colToBeAdded = coo_matrix(X_test[featureName]).transpose()\n",
    "    combResultsTest = hstack([combResultsTest, colToBeAdded])\n",
    "\n",
    "\n",
    "clf = LogisticRegression(random_state=0, solver='newton-cg', C=0.6, multi_class='multinomial', \\\n",
    "                         n_jobs = -1, max_iter=10000)\n",
    "\n",
    "clf.fit(combResults, y_train)\n",
    "pred = clf.predict(combResultsTest)\n",
    "score = accuracy_score(y_test, pred)\n",
    "print(\"accuracy:   %0.3f\" % score)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It shows scales the features does not improve the accuracy. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Confusion matrix of a typical run results is shown. It shows the model has trouble classifying false and partial true, and it also has trouble recognizing true claim."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Figure size 432x288 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Confusion matrix, without normalization\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "cm = confusion_matrix(y_test, pred, labels=[0, 1, 2])\n",
    "plot_confusion_matrix(cm, classes=[0, 1, 2])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Demostrate feature Importance for each of the three class"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "zeroClass = []\n",
    "oneClass = []\n",
    "twoClass = []\n",
    "listClass = [zeroClass, oneClass, twoClass]\n",
    "for idx in range(clf.coef_.shape[0]):\n",
    "    for position, each in enumerate(clf.coef_[idx]):\n",
    "        listClass[idx].append((each,position))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Class False\n",
      "data\n",
      "race\n",
      "deport\n",
      "bush\n",
      "spend\n",
      "nomin\n",
      "think\n",
      "contribut\n",
      "sponsor\n",
      "2013\n",
      "pay\n",
      "center\n",
      "fair\n",
      "pictur\n",
      "campaign\n",
      "reform\n",
      "fund\n",
      "2007\n",
      "opportun\n",
      "amend\n",
      "paid\n",
      "district\n",
      "ye\n",
      "return\n",
      "trend\n",
      "busi\n",
      "militari\n",
      "differ\n",
      "rate\n",
      "prohibit\n",
      "#############\n",
      "Class Partial True\n",
      "special\n",
      "begin\n",
      "consist\n",
      "arm\n",
      "open\n",
      "commun\n",
      "quickli\n",
      "taxpay\n",
      "la\n",
      "diseas\n",
      "advis\n",
      "east\n",
      "extend\n",
      "cancer\n",
      "adopt\n",
      "sen\n",
      "grant\n",
      "offic\n",
      "self\n",
      "sanction\n",
      "mail\n",
      "000\n",
      "13\n",
      "sens\n",
      "noth\n",
      "director\n",
      "feature number 1102 is not in the list\n",
      "feature number 1073 is not in the list\n",
      "regist\n",
      "50\n",
      "#############\n",
      "Class True\n",
      "ban\n",
      "threat\n",
      "putin\n",
      "40\n",
      "expans\n",
      "job\n",
      "florida\n",
      "individu\n",
      "labor\n",
      "applaus\n",
      "titl\n",
      "design\n",
      "white hous\n",
      "presid trump\n",
      "author\n",
      "organ\n",
      "attack\n",
      "forc\n",
      "fake\n",
      "obama\n",
      "russia\n",
      "facebook\n",
      "quot\n",
      "2019\n",
      "evid\n",
      "revenu\n",
      "claim\n",
      "news\n",
      "fact\n",
      "studi\n"
     ]
    }
   ],
   "source": [
    "for idx in range(len(listClass)):\n",
    "    if idx == 2:\n",
    "        listClass[idx] = sorted(listClass[idx],reverse=True)\n",
    "    else:\n",
    "        listClass[idx] = sorted(listClass[idx],reverse=False)\n",
    "featureNameList = tfidf_vectorizer.get_feature_names()\n",
    "print('Class False')\n",
    "for each in listClass[0][:30]:\n",
    "    print(featureNameList[each[1]])\n",
    "print('#############')\n",
    "print('Class Partial True')\n",
    "for each in listClass[1][485:515]: \n",
    "    if each[1] < 1000:\n",
    "        print(featureNameList[each[1]])  \n",
    "    else:\n",
    "        print('feature number %d is not in the list' %each[1])\n",
    "print('#############') \n",
    "print('Class True')\n",
    "for each in listClass[2][-30:]:\n",
    "    print(featureNameList[each[1]])"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
